¿Que es un paradigma ?
Es todo aquel modelo, patrón o ejemplo que debe seguirse en determinada situación.
También hace referencia  a una teoría o conjunto de teorías que sirve de modelo a seguir para resolver problemas o situaciones determinadas que se planteen.

Paradigma orientada a objetos: 
Es la implementación de un paradigma de la programación, o sea, es la forma de implementar una serie de normas o estándares. 

Es el traer objetos de la vida real, siendo convertidos en código para utilizarlo a la hora de programar.

Se basa en un concepto, agrupar datos que estén relacionados de alguna manera, y se llaman clase. Tiene las siguientes características: 

Abstracción
Encapsulamiento
Polimorfismo
Herencia
UML

Clases:
Son las encargadas de guardar la información traída de la Abstracción de un objeto de la vida real a un código, las clases también se llaman métodos.

Métodos: 
*Son acciones contenidas en una clase, y definen su comportamiento.
*Suelen tener por nombres verbos en infinitivo.
*Desde la perspectiva de Diseño y Programación, se denominan Métodos.
*Desde la perspectiva de análisis, se denominan operaciones.
*Pueden tener opcionalmente valores de entrar [Parametros] y valores de salida [Valores de retorno]
*Pueden existir procedimientos [no retornar un valor] y funciones [retornar un valor]

/*
El código de referencia esta en el archivo llamado NewClass, en la carpeta de POO 
*/

Objetos: 
*Es una instancia de una clase
*Es la representación de un objetos que generalmente existe en la vida real
*Posee un estado (de acuerdo a sus atributos)
*Posee un compartimiento (realizan operaciones de acuerdo a sus métodos)

Constructores:
*Son funciones especiales que contienen las clases que permiten la creación de objetos
*Pueden recibir datos/parámetros como no (constructor vacío)
*Se llaman SIEMPRE igual que la clase
*No retorna NINGUN VALOR (ni siquiera VOID)
*Generalmente se utilizan dos tipos de constructores: Vacío y con parámetros

Getters y setters:

Son las propiedades de acceso o accessors. Son, en esencia, funciones que se ejecutan para obtener (“get”) y asignar (“set”) un valor, pero que para un código externo se ven como propiedades normales.

Herencia:

*Hay clases que comparten gran parte de sus características
*Permite reutilizar clases, permitiendo crear una nueva clase y utilizar la funcionalidad de otra para no tener que reescribir el código.
*Se llaman subclase, pueden tener atributos y métodos que en la original no.

/*
El archivo de ejemplo se encuentra en la carpeta Herencia
*/

Polimorfismo: poli-muchas//morfismo-formas

		Vehiculo
Coche -- moto -- bus

Es el poder utilizar diferentes tipos de datos, como si fueran del mismo tipo, desde que sean hijos de una clase clase principal [referencia a herencia]

Sobrescritura y Sobrecarga:

La sobrecarga hace referencia a cuando tenemos varias funciones con el mismo nombre pero con diferente cantidad de tipos de datos o parámetros.

La sobrescritura hace referencia a cuando se toma una función y se reutilizándola de forma que se aplica de diferente forma a la original.

/*
El archivo se encuentra en POO
*/

Encapsulamiento: 

Encapsular hace referencia a reunir todos los elementos que se pueden considerar
--Niveles de accedo: 
			Publico: Permite que desde cualquier clase se pueda acceder.
			Privado: Solo se puede utilizar desde la clase donde se creo.
			Protegido: Un punto intermedio de protección, donde solo las clases hijas pueden acceder a este encapsulado.
/*
Archivo, encapsulamiento.
*/

Clases abstractas:

Las clases abstractas hacen referencia a como guarda las funciones para que las clases hijas las hereden, pero no les dice el como tienen que funcionar, teniendo el nivel de publico y protegido, pero nunca privado.
(una clase hija no puede heredar de mas de 1 clase abstracta)

/*
Carpeta de abstracta
*/

Interfaces:

Hace referencia a colecciones de métodos abstractos donde se tienen atributos constantes. Todos los métodos que contiene son abstractos.  

/*
Ejercicio del los siguentes temas: Interfaces, Clases abstractas. En la carpeta POO_Ejercicios.
*/

/*
Los siguientes temas estan en la carpeta Collections
*/

Collections: 

Estructuras parecidas a los arreglos, pero siendo dinámicos, o sea, que el tamaño y cantidad de elementos pueden variar con del tiempo.

Tipos de Collections (principales): LIST, SET; QUEUE y MAP

Lists: Conjunto de elementos relacionados entre si que tienen un determinado orden, y tambien tienen un tamaño dinamico. Tienen 2 tipos de orden FIFO(first in first out/el primero en entrar es el primero en salir) y LIFO(last in first out/el ultimo que entra es el primero en salir).

　　　*Arraylists: una clase representada como Matriz dinamica, la cual
　　　permite colecciones colecciones o elementos duplicados,
　　　permite un acceso a travez de indices, y a la hora de
　　　realizar acciones de tipo crud o mover lugares es lenta.
　　　*Linkedlist: una clase, se representa como una lista doblemene
　　　enlazada (ida y vuelta), permite duplicada, con orden
　　　de insersion, mas rapida de manipular, tambien funciona
　　　como pila o cola, y permite agregar o eliminar al
　　　principio y final.

DIFERENCIA ENTRE ARRAYLIST Y LINKEDLIST: 

*Las array tienen un indice para ser recorridas, las linkedlist no.

*La forma de eliminacion de los datos dentros de estos es distinto, mientras que cuando se elimina en un array atravez del indice y la fila se ordena corriendo hacia atras para llenar el dato vacio, en la list cuando se elimina un dato, se re acomodan los punteros. 

	*Stacks: Pilas de objetos, uno arriba del otro. Tipo LIFO.